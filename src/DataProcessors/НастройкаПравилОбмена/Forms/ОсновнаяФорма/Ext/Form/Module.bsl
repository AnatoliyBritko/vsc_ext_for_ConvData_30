&НаКлиенте
Перем WshShell;

#Область ОбработчикиСобытийФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьСоздатьКаталог(Знач КаталогДляПроверки)
	
	ВыбФайл = Новый Файл(КаталогДляПроверки);		
	Если Не ВыбФайл.Существует() Тогда
		СоздатьКаталог(КаталогДляПроверки);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура vsc_СоздатьФайлОбработкиМенеджераОбмена(Команда)
	
	//. Ограничения для работы.
	// Для генерации обработки используется база конвертации, поэтому:
	// - она должна быть файловой.
	// - не должна содержать пользователей
	// - для генерации используется версия 1С, под которой запущено клиентское приложение.
	
	
	// Определим переменные окружения.
	КаталогДляГотовыхФайлов        = "c:\Les\-=ОбменДанными=-\МодулиМенеджераОбмена\"; 
	
	ВременныйКаталогБазы           = "E:\АльфоАвто обмен данными\tolik\-=Авто=-\КД Пустая";
	ВременныйКаталогБазы           = ОбщегоНазначенияКлиентСервер.КаталогФайловойИнформационнойБазы();
	ВерсияПлатформыДляГенерацииEPF = "C:\Program Files (x86)\1cv8\" + ВерсияПриложения() + "\bin\";
	
	КаталогДляГотовыхФайлов        = ДополнитьСлешВПуть(КаталогДляГотовыхФайлов);
	
	// Формируем имя временного католога с исходниками обработки.
	ОписаниеТиповСтрока 		= Новый ОписаниеТипов("Строка");
	ИдентификаторКонвертации 	= ОписаниеТиповСтрока.ПривестиЗначение(Объект.Конвертация.УникальныйИдентификатор());
	КаталогДляВременныхФайлов	= КаталогДляГотовыхФайлов + ИдентификаторКонвертации + "\";
	
	// Проверям если каталог не существует, то создаем его.	
	ПроверитьСоздатьКаталог(КаталогДляВременныхФайлов);
	ПроверитьСоздатьКаталог(КаталогДляГотовыхФайлов);
	
	// Создаем внешнюю обработку в формате xml.
	// Сохраняем xml-макет внешней обработки.
	КорневойФайлОбработки = КаталогДляВременныхФайлов + "Обработка.xml"; 
	ПолучитьОбщийМакетНаСервере().Записать(КорневойФайлОбработки);
	
	// Создаем структуру внешней обработки.
	КаталогМодуляОбработки = КаталогДляВременныхФайлов + "Обработка\Ext\";
	СоздатьКаталог(КаталогМодуляОбработки);
	
	// Инициализируем модуль внешней обработки.
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.ДобавитьСтроку("// ObjectModule.bsl");
	ТекДок.ДобавитьСтроку(СохранитьМодульСервер().ПолучитьТекст());
	ТекДок.Записать(КаталогМодуляОбработки + "ObjectModule.bsl"); 
	
	ИмяВнешнейОбработки = ИмяВнешнейОбработки();
	ИмяВременногоEPF    = КаталогДляВременныхФайлов + ИмяВнешнейОбработки;
	ИмяГотовогоEPF      = КаталогДляГотовыхФайлов + ИмяВнешнейОбработки;
	
	ЭтоLinux = ЭтоLinuxСервер();	
	Если ЭтоLinux Тогда
		СтрокаЗапуска1С = "" + ДополнитьСлешВПуть(ВерсияПлатформыДляГенерацииEPF) + "1cv8 DESIGNER /F""" 
		+ ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ + КорневойФайлОбработки 
		+ """ """ + ИмяВременногоEPF + """";
	Иначе
		СтрокаЗапуска1С = """" + ДополнитьСлешВПуть(ВерсияПлатформыДляГенерацииEPF) + "1cv8"" DESIGNER /F """ 
		+ ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ + КорневойФайлОбработки 
		+ """ """ + ИмяВременногоEPF + """";
	КонецЕсли;
	
	ОписаниеЗапуска = Запустить1С(СтрокаЗапуска1С, КаталогДляВременныхФайлов);
	
	// Копируем готовую обработку из каталога временных файлов.
	КопироватьФайл(ИмяВременногоEPF, ИмяГотовогоEPF);
	
	// Удалим каталог временных файлов.
	//УдалитьФайлы(КаталогДляВременныхФайлов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИмяВнешнейОбработки()
	Возврат "МенеджерОбмена" + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Конвертация, "Наименование")) + ".epf";	
КонецФункции	

// Выполняет запуск 1С (Конфигуратор, Предприятие) и возвращает структурус путями к файлам логов (ключ ИмяФайлаOUT и ИмяФайлаЛога)
// ВНИМАНИЕ: файлы логов нужно удалять самостоятельно.
//
// Параметры:
//   СтрокаЗапуска1С - Строка - строка запуска 1С
//
//  Возвращаемое значение:
//   Структура - структура с путями к файлам логов (ключ ИмяФайлаOUT и ИмяФайлаЛога)
//
&НаКлиенте
Функция Запустить1С(Знач СтрокаЗапуска1С, Знач КаталогДляВременныхФайлов)
	Рез = Новый Структура;
	
	ИмяФайлаЛога = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов, "txt");
	ИмяФайлаOUT = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов, "txt");
	
	Рез.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	Рез.Вставить("ИмяФайлаOUT", ИмяФайлаOUT);
	
	КомандаСистемы = СтрокаЗапуска1С + " /out " + ИмяФайлаOUT + " > " + ИмяФайлаЛога;
	
	//Отладка(КомандаСистемы);
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы, Истина, Ложь); //TODO код возврата получить, хотя бы от Конфигуратора??
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьПутьВременногоФайла(Знач КаталогДляВременныхФайлов, Знач Расширение = "")
	НовоеИмя = ПолучитьИмяВременногоФайла(Расширение);
	Файл = Новый Файл(НовоеИмя);
	НовоеИмя = КаталогДляВременныхФайлов + "/" + Файл.Имя;
	Возврат НовоеИмя;
КонецФункции

&НаКлиенте
Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(Знач ТекстКоманды, Знач ЖдатьОкончания = Истина, 
	Знач ИспользоватьКодировкуТекстаUTF8 = Истина) Экспорт
	
	Если ЖдатьОкончания = -1 Тогда
		ЖдатьОкончания = Истина;
	ИначеЕсли ЖдатьОкончания = 0 Тогда
		ЖдатьОкончания = Ложь;
	КонецЕсли;

	УдалятьФайл = Ложь;
	ИмяВременногоФайлаКоманды = ТекстКоманды;
	Если ИспользоватьКодировкуТекстаUTF8 Тогда
		
		ИмяВременногоФайлаКоманды = ПолучитьИмяВременногоФайла("bat");
		
		//эти строки нужны для записи файла без BOM
		ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, "CESU-8", , Ложь);
		ЗТ.ЗаписатьСтроку("chcp 65001");
	
		ЗТ.ЗаписатьСтроку(ТекстКоманды);
		ЗТ.Закрыть();
		
		УдалятьФайл = Истина;		
	КонецЕсли;
	
	ИмяВременногоФайлаКоманды = "cmd /c """ + ИмяВременногоФайлаКоманды + """";

	//КонтекстЯдра.Отладка(ТекстКоманды);
	//КонтекстЯдра.Отладка(ИмяВременногоФайлаКоманды);
	WshShell = Неопределено;
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
	КонецЕсли;

	Рез = WshShell.Run(ИмяВременногоФайлаКоманды, 0, ?(ЖдатьОкончания, -1, 0));

	Если ЖдатьОкончания И УдалятьФайл Тогда
		//иначе удалять нельзя
		////////Если КонтекстЯдра.ЕстьПоддержкаАсинхронныхВызовов Тогда
		////////	// для скорости не удаляем временный файл, сервер потом удалит КонтекстЯдра.УдалитьФайлыКомандаСистемы(ИмяВременногоФайлаКоманды);
		////////Иначе
		////////	УдалитьФайлы(ИмяВременногоФайлаКоманды);
		////////КонецЕсли;	 
	КонецЕсли;	 

	Возврат Рез;
КонецФункции

// далее переменная WshShell будет закеширована, чтобы не создавать ComObject каждый раз
&НаКлиенте
Функция ПолучитьWshShell() Экспорт

	Если WshShell = Неопределено Тогда
		Попытка
			WshShell = Новый COMОбъект("WScript.Shell");
		Исключение
			ВызватьИсключение "Не удалось подключить COM объект <WScript.Shell>";
		КонецПопытки;
	КонецЕсли;

	Возврат WshShell;

КонецФункции

&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	ЭтоLinux = ЭтоLinuxСервер();
	
	Разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		Разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;
	
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

&НаСервере
Функция ПолучитьОбщийМакетНаСервере()
	  Возврат ПолучитьОбщийМакет("vsc_СтруктураВнешнейОбработки");
КонецФункции	

Функция ВерсияПриложения() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ВерсияПриложения;
	
КонецФункции


Функция ЭтоLinuxСервер() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
КонецФункции

#КонецОбласти


&НаСервере
Функция ПолучитьКаталогПрограммыПроверки()
	КаталогПрограммы = ХранилищеОбщихНастроек.Загрузить("НастройкиПроверки2НДФЛ", "КаталогПрограммыПроверки"); 	
	Возврат КаталогПрограммы;
КонецФункции

&НаСервере
Процедура ЗаписатьКаталогПрограммыВНастройках(КаталогПрограммы)	
	ХранилищеОбщихНастроек.Сохранить("НастройкиПроверки2НДФЛ", "КаталогПрограммыПроверки", КаталогПрограммы);	
КонецПроцедуры
